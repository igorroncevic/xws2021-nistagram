syntax = "proto3";

package proto;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/xws2021-nistagram/common/proto";

service Users {

  //Api Key
  rpc GetKeyByUserId(RequestIdUsers) returns (ApiTokenResponse) {
    option(google.api.http) = {
      get: "/api/apiKey/{id}",
    };
  }

  rpc GenerateApiToken(RequestIdUsers) returns (ApiTokenResponse) {
    option(google.api.http) = {
      post: "/api/apiKey/generate",
      body: "*"
    };
  }

  rpc ValidateKey(ApiTokenResponse) returns (EmptyResponse) {
    option(google.api.http) = {
      get: "/api/apiKey/validate/{token}",
    };
  }

  //registration requests!
  rpc CreateAgentUser(CreateUserRequest) returns (UsersDTO){
    option(google.api.http) = {
      post: "/api/users/agentRegistration",
      body: "user"
    };
  }

  rpc GetAllPendingRequests(EmptyRequest) returns (ResponseRequests) {
    option(google.api.http) = {
      get: "/api/users/agent/get_requests"
    };
  }

  rpc UpdateRequest(RegistrationRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/agent/updateRequest",
      body: "*"
    };
  }

  rpc LoginUser (LoginRequest) returns (LoginResponse) {
    option(google.api.http) = {
      post: "/api/users/login",
      body: "*"
    };
  }

  rpc CreateUser (CreateUserRequest) returns (UsersDTO) {
    option(google.api.http) = {
      post: "/api/users",
      body: "user"
    };
  }

  rpc GetUserById (RequestIdUsers) returns (UsersDTO) {
    option(google.api.http) = {
      get: "/api/users/{id}"
    };
  }

  rpc GetUsernameById (RequestIdUsers) returns (UsersDTO) {
    option(google.api.http) = {
      get: "/api/users/username/{id}"
    };
  }

  rpc GetBlockedUsers (RequestIdUsers) returns (ResponseIdUsers) {
    option(google.api.http) = {
      get: "/api/users/get_blocked/{id}"
    };
  }

  rpc GetUserNotifications (RequestIdUsers) returns (CreateNotificationResponse) {
    option(google.api.http) = {
      get: "/api/users/get_notifications/{id}"
    };
  }

  rpc GetPhotoById (RequestIdUsers) returns (UserPhoto) {
    option(google.api.http) = {
      get: "/api/users/photo/{id}"
    };
  }

  rpc GetAllUsers (EmptyRequest) returns (UsersResponse) {
    option(google.api.http) = {
      get: "/api/users"
    };
  }

  rpc UpdateUserProfile (CreateUserDTORequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/update_profile"
      body: "*"
    };
  }

  rpc UpdateUserPhoto (UserPhotoRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/update_photo"
      body: "*"
    };
  }


  rpc UpdateUserPassword (CreatePasswordRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/update_password"
      body: "*"
    };
  }

  rpc SearchUser (SearchUserDtoRequest) returns (UsersResponse) {
    option(google.api.http) = {
      post: "/api/users/searchByUser"
      body: "user"
    };
  }

  rpc GetAllInfluncers (EmptyRequest) returns (InfluencerSearchResult) {
    option(google.api.http) = {
      get: "/api/users/get-all-influencers",
    };
  }

  rpc SendEmail (SendEmailDtoRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/sendEmail"
      body: "*"
    };
  }

  rpc GetUserByEmail (RequestEmailUser) returns (UsersDTO) {
    option(google.api.http) = {
      get: "/api/users/getUserByEmail/{email}"
    };
  }
  rpc GetUserByUsername (RequestUsernameUser) returns (UsersDTO) {
    option(google.api.http) = {
      get: "/api/users/getUserByUsername/{username}"
    };
  }

  rpc ValidateResetCode (RequestResetCode) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/validateResetCode"
      body: "*"
    };
  }

  rpc ChangeForgottenPass (CreatePasswordRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/changeForgottenPass"
      body: "*"
    };
  }

  rpc CheckIsApproved (RequestIdUsers) returns (BooleanResponseUsers) {
    option(google.api.http) = {
      post: "/api/users/checkIsApproved"
      body: "*"
    };
  }

  rpc CheckIsActive (RequestIdUsers) returns (BooleanResponseUsers) {
    option(google.api.http) = {
      post: "/api/users/checkIsActive"
      body: "*"
    };
  }

  rpc ChangeUserActiveStatus(RequestIdUsers)returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/change_active_status"
      body: "*"
    };
  }

  rpc ApproveAccount (CreatePasswordRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/approveAccount"
      body: "*"
    };
  }

  rpc GoogleAuth (GoogleAuthRequest) returns (LoginResponse) {
    option(google.api.http) = {
      post: "/api/users/auth/google"
      body: "*"
    };
  }

  rpc CreateNotification(CreateNotificationRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/create_notification"
      body: "*"
    };
  }

  rpc DeleteNotification(RequestIdUsers) returns (EmptyResponse) {
    option(google.api.http) = {
      get: "/api/users/delete_notifications/{id}"
    };
  }

  rpc ReadAllNotifications(RequestIdUsers) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/read_notifications"
      body: "*"
    };
  }

  rpc GetByTypeAndCreator(Notification) returns (Notification) {
    option(google.api.http) = {
      post: "/api/users/getBy_type_creator"
      body: "*"
    };
  }

  rpc DeleteByTypeAndCreator(Notification) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/deleteBy_type_creator"
      body: "*"
    };
  }
  rpc UpdateNotification(Notification) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/update_notification"
      body: "*"
    };
  }



  //* Verification requests *
  rpc SubmitVerificationRequest (VerificationRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/submit-verification-request",
      body: "*"
    };
  }

  rpc GetPendingVerificationRequests (EmptyRequest) returns (VerificationRequestsArray) {
    option(google.api.http) = {
      get: "/api/users/get-pending-verification-requests",
    };
  }

  rpc ChangeVerificationRequestStatus (VerificationRequest) returns (EmptyResponse) {
    option(google.api.http) = {
      post: "/api/users/change-verification-request-status",
      body: "*"
    };
  }

  rpc GetVerificationRequestsByUserId (VerificationRequest) returns (VerificationRequestsArray) {
    option(google.api.http) = {
      post: "/api/users/get-verification-requests-by-user",
      body : "*"
    };
  }

  rpc GetAllVerificationRequests (EmptyRequest) returns (VerificationRequestsArray) {
    option(google.api.http) = {
      get: "/api/users/get-all-verification-requests",
    };
  }


}




message CreateNotificationRequest {
  string userId = 1;
  string creatorId = 2;
  string type = 3;
  string contentId = 4;
}

message Notification {
  string id = 1;
  string userId = 2;
  string creatorId = 3;
  string text = 4;
  string type = 5;
  bool isRead = 6;
  string contentId = 7;
  google.protobuf.Timestamp createdAt = 8;
}

message CreateNotificationResponse {
  repeated Notification notifications = 1;
}

message Password {
  string oldPassword = 1;
  string newPassword = 2;
  string repeatedPassword = 3;
  string id = 4;
}

message User {
  string id = 1;
  string firstName = 2;
  string lastName = 3;
  string email = 4;
  string username = 5;
  string password = 6;
  string role = 7;
  google.protobuf.Timestamp birthdate = 8;
  string profilePhoto = 9;
  string phoneNumber = 10;
  string sex = 11;
  bool isActive = 12;
  string biography = 13;
  string website = 14;
  string resetCode = 15;
  bool approvedAccount = 16;
  google.protobuf.Timestamp tokenEnd = 17;
}

message UsersDTO {
  string id = 1;
  string firstName = 2;
  string lastName = 3;
  string email = 4;
  string username = 5;
  string role = 6;
  google.protobuf.Timestamp birthdate = 7;
  string profilePhoto = 8;
  string phoneNumber = 9;
  string sex = 10;
  bool isActive = 11;
  string biography = 12;
  string website = 13;
  string category = 14;
  string resetCode = 15;
  bool approvedAccount = 16;
  google.protobuf.Timestamp tokenEnd = 17;
}

message InfluencerSearch {
  string id = 1;
  string firstName = 2;
  string lastName = 3;
  string username = 4;
  string profilePhoto = 5;
  bool isProfilePublic = 6;
}

message InfluencerSearchResult {
  repeated InfluencerSearch users = 1;
}

//TODO ne treba da vracamo usera vec usera bez sifre i sa biografijom i website-om
message UsersResponse {
  repeated UsersDTO users = 1;
}

message UserPhotoRequest {
  string userId = 1;
  string photo = 2;
}

message UserResponse {
  UsersDTO users = 1;
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserDTORequest {
  UsersDTO user = 1;
}

message CreatePasswordRequest {
  Password password = 1;
}

message SearchUserDtoRequest {
  UsersDTO user = 1;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string accessToken = 1;
  string userId = 2;
  string role = 3;
  string username = 4;
  bool   isSSO = 5;
  string photo = 6;
}

message SendEmailDtoRequest {
  string to = 1;
}

// Has to be a separate message for possible image streaming later on
message UserPhoto {
  string photo = 1;
}

message RequestEmailUser {
  string email = 1;
}

message RequestUsernameUser {
  string username = 1;
}

message RequestResetCode {
  string resetCode = 1;
  string email = 2;
}

message RequestChangeForgottenPass {
  string password = 1;
  string rePassword = 2;
}

message RequestIdUsers {
  string id = 1;
}

message ResponseIdUsers {
  repeated string id = 1;
}

message GoogleAuthRequest {
  string token = 1;
}
message BooleanResponseUsers {
  bool response = 1;
}

message VerificationRequestsArray {
  repeated VerificationRequest verificationRequests = 1;
}

message RegistrationRequest {
  string id = 1;
  string userId = 2;
  google.protobuf.Timestamp createdAt = 3;
  string firstName = 4;
  string lastName = 5;
  string website = 6;
  string username = 7;
  string email = 8;
  string status = 9;
}

message ApiTokenResponse {
  string token = 1;
}

message ResponseRequests {
  repeated RegistrationRequest registrationRequests = 1;
}

message VerificationRequest {
  string id = 1;
  string userId = 2;
  string documentPhoto = 3;
  string category = 4;
  string firstName = 5;
  string lastName = 6;
  string status = 7;
  google.protobuf.Timestamp createdAt = 8;
}

message EmptyRequest {}
message EmptyResponse {}
